// Code generated by mockery v2.7.5. DO NOT EDIT.

package convertermock

import (
	image "image"

	mock "github.com/stretchr/testify/mock"
)

// PdfFile is an autogenerated mock type for the PdfFile type
type PdfFile struct {
	mock.Mock
}

// AddPage provides a mock function with given fields: img
func (_m *PdfFile) AddPage(img image.Image) error {
	ret := _m.Called(img)

	var r0 error
	if rf, ok := ret.Get(0).(func(image.Image) error); ok {
		r0 = rf(img)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *PdfFile) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields:
func (_m *PdfFile) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NumPages provides a mock function with given fields:
func (_m *PdfFile) NumPages() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Open provides a mock function with given fields: path
func (_m *PdfFile) Open(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Page provides a mock function with given fields: page, dpi
func (_m *PdfFile) Page(page int, dpi float64) (image.Image, error) {
	ret := _m.Called(page, dpi)

	var r0 image.Image
	if rf, ok := ret.Get(0).(func(int, float64) image.Image); ok {
		r0 = rf(page, dpi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, float64) error); ok {
		r1 = rf(page, dpi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: path
func (_m *PdfFile) Save(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
